#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_map>

using namespace std;

class Solution {
public:
	int sumA(vector<int>& A)
	{
		int result = 0;
		int i = 0, len = A.size();
		for (; i < len; i++)
			result += A[i];
		return result;
	}
	int calc(vector<int>& A)
	{
		int result = 0;
		int i = 0, j = 0, len = A.size();
		for (; i < len; i++, j++)
			result += i*A[j];
		return result;
	}
	int maxRotateFunction(vector<int>& A) {
		int len = A.size();
		if (len == 0)
			return 0;
		int maxN;
		int i, all, AZ;
		all = sumA(A);
		AZ = calc(A);
		maxN = AZ;
		for (i = len-1; i > 0; i--)
		{
			AZ = AZ + all - len*A[i];
			if (AZ > maxN)
				maxN = AZ;
		}
		return maxN;
	}
};

int main()
{
	vector<int> container;
	container.push_back(4);
	container.push_back(3);
	container.push_back(2);
	container.push_back(6);
	Solution a;
	cout << a.maxRotateFunction(container) << endl;
	return 0;
}
