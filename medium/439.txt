class Solution {
public:
	string help(char a) {
		switch (a)
		{
		case '0':
			return "0";
		case '1':
			return "1";
		case '2':
			return "2";
		case '3':
			return "3";
		case '4':
			return "4";
		case '5':
			return "5";
		case '6':
			return "6";
		case '7':
			return "7";
		case '8':
			return "8";
		case '9':
			return "9";
		case 'T':
			return "T";
		case 'F':
			return "F";
		case ':':
			return ":";
		case '?':
			return "?";
		default:
			break;
		}
		return "";
	}
	void numberGetF(stack<string>& number) {
		string tmp = number.top();
		number.pop();
		number.pop();
		number.push(tmp);
	}
	void numberGetS(stack<string>& number) {
		number.pop();
	}
	string parseTernary(string expression) {
		string tmp, tmpB, tmpN;
		stack<string> number;
		int i = 0, len = expression.size() - 1;
		for (i = len; i >= 0; i--) {
			tmp = help(expression[i]);
			if (tmp == "?") {
				if (expression[--i] == 'T')
					numberGetF(number);
				else
					numberGetS(number);
			}
			else if (tmp == ":") {
				continue;
			}
			else {
				number.push(tmp);
			}
		}
		return number.top();
	}
};