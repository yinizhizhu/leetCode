struct POINT
{
    int x;
    int y;
    POINT(int newx, int newy): x(newx), y(newy) {}
};

class Solution
{
public:
    void solve(vector< vector<char> > &board)
    {
        int m = board.size();
        if (m == 0)
            return;
        int n = board[0].size();
        if(n == 0)
            return;

        for(int i = 0; i < m; i ++)
            for(int j = 0; j < n; j ++)
                if(board[i][j] == 'O')
                    if(i == 0 || i == m-1 || j == 0 || j == n-1)
                        dfs(board, i, j, m, n);

        for(int i = 0; i < m; i ++)
            for(int j = 0; j < n; j ++)
            {
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
                else if(board[i][j] == '*')
                    board[i][j] = 'O';
            }
    }
    void dfs(vector< vector<char> > &board, int i, int j, int m, int n)
    {
        stack<POINT*> stk;
        POINT* pos = new POINT(i, j);
        stk.push(pos);
        board[i][j] = '*';
        while(!stk.empty())
        {
            POINT* top = stk.top();
            if(top->x > 0 && board[top->x-1][top->y] == 'O')
            {
                POINT* up = new POINT(top->x-1, top->y);
                stk.push(up);
                board[up->x][up->y] = '*';
                continue;
            }
            if(top->x < m-1 && board[top->x+1][top->y] == 'O')
            {
                POINT* down = new POINT(top->x+1, top->y);
                stk.push(down);
                board[down->x][down->y] = '*';
                continue;
            }
            if(top->y > 0 && board[top->x][top->y-1] == 'O')
            {
                POINT* left = new POINT(top->x, top->y-1);
                stk.push(left);
                board[left->x][left->y] = '*';
                continue;
            }
            if(top->y < n-1 && board[top->x][top->y+1] == 'O')
            {
                POINT* right = new POINT(top->x, top->y+1);
                stk.push(right);
                board[right->x][right->y] = '*';
                continue;
            }
            stk.pop();
        }
    }
};