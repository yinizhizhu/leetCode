class Solution {
public:
    bool isOp(char c)
    {
        if (c < '0')
            return true;
        return false;
    }
    
    int calc(int a, int b, char tmp)
    {
        if (tmp == '*')
            return (a*b);
        else if (tmp == '+')
            return (a+b);
        else
            return (a-b);
    }
    
    vector<int> divider_conquer(vector<int> nums, vector<char> op, int head, int tail)
    {
        int len = tail-head;
        vector<int> result, resultL, resultR;
        char calcOP;
        
        if (len == 1)
            result.push_back(nums[head]);
        else if (len == 2)
            result.push_back(calc(nums[head], nums[head+1], op[head]));
        else
        {
            for (int i=0; i<(len-1); i++)
            {
                calcOP = op[head+i];
                resultL = divider_conquer(nums, op, head, head+i+1);
                resultR = divider_conquer(nums, op, head+i+1, tail);
                for (int j=0; j<resultL.size(); j++)
                    for (int k=0; k<resultR.size(); k++)
                        result.push_back(calc(resultL[j], resultR[k], calcOP));
            }
        }
        return result;
    }
    
    vector<int> diffWaysToCompute(string input) {
        vector<int> nums;
        vector<char> operators;
        char tmp, container[10];
        int i, len = input.length(), index=0;
        
        for (i=0; i<len; i++)
        {
            tmp = input[i];
            if (isOp(tmp))
            {
                container[index] = 0;
                nums.push_back(atoi(container));
                operators.push_back(tmp);
                index = 0;
            }
            else
                container[index++] = tmp;
        }
        container[index] = 0;
        nums.push_back(atoi(container));
        
        return divider_conquer(nums, operators, 0, nums.size());
    }
};