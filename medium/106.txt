class Solution {
public:
	TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
		if (inorder.size() != postorder.size()) return NULL;
		return help(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1);
	}
	TreeNode* help(vector<int>& ino, int ih, int ie, vector<int>& pos, int ph, int pe) {
		if (ph > pe || ih > ie) return NULL;
		int im = ih, tmp = pos[pe];
		for (; im <= ie; im++)
			if (tmp == ino[im])
				break;
		TreeNode* root = new TreeNode(tmp);
		tmp = ph - ih + im;
		root->left = help(ino, ih, im - 1, pos, ph, tmp - 1);
		root->right = help(ino, im + 1, ie, pos, tmp, pe - 1);
		return root;
	}
};