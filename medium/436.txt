/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
struct node {
	Interval a;
	int index;
	int value;
};
bool cmpAsc(const node& s1, const node& s2) //for sort
{
	return s1.a.start < s2.a.start;
}
class Solution {
public:
	void help(vector<node>& cnt) {
		sort(cnt.begin(), cnt.end(), cmpAsc);
		int tmp;
		int i = 0, j, len = cnt.size();
		for (; i < len - 1; i++) {
			tmp = cnt[i].a.end;
			for (j = i + 1; j < len; j++) {
				if (cnt[j].a.start >= tmp) {
					cnt[i].value = cnt[j].index;
					break;
				}
			}
		}
	}
	vector<int> findRightInterval(vector<Interval>& intervals) {
		node tmp;
		tmp.value = -1;
		vector<int> res;
		vector<node> cnt;
		int len = intervals.size();
		for (int i = 0; i < len; i++) {
			tmp.index = i;
			tmp.a.start = intervals[i].start;
			tmp.a.end = intervals[i].end;
			cnt.push_back(tmp);
		}
		help(cnt);
		res.resize(len);
		for (int i = 0; i < len; i++)
			res[cnt[i].index] = cnt[i].value;
		return res;
	}
};