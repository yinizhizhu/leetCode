class Solution {
public:
	bool tag;
	vector<int> ans;
	int container[10001], tagC[10001];
	bool check(int k, int n) {
		int tmp = 0, i;
		for (i = 1; i <= n; i++)
			tagC[i] = 0;
		for (i = 1; i < n; i++)
			tagC[absolute(ans[i] - ans[i - 1])] = 1;
		for (i = 1; i <= n; i++)
			tmp += tagC[i];
		return (tmp == k);
	}
	void initial(int n) {
		tag = true;
		for (; n; n--)
			tagC[n] = container[n] = 0;
	}
	int absolute(int a) { return (a >= 0 ? a : -a); }
	void dfs(int counter, int n, int k) {
		if (counter) {
			for (int i = 1; tag && i <= n; i++) {
				if (container[i] == 0) {
					container[i] = 1;
					ans.push_back(i);
					dfs(counter - 1, n, k);
					if (!tag) return;
					container[i] = 0;
					ans.erase(ans.end() - 1);
				}
			}
		}
		else {
			if (check(k, n))
				tag = false;
		}
	}
	vector<int> constructArray(int n, int k) {
		initial(n);
		dfs(n, n, k);
		vector<int> res;
		for (int i = 0; i < n; i++)
			res.push_back(ans[i]);
		return res;
	}
};

class Solution {
public:
	void insert(vector<int>& ans, int h, int k) {
		if (k < 2) return;
		int i, n = ans.size(), tmp;
		n = h + k;
		if (n >= ans.size())
			n = ans.size() - 1;
		tmp = ans[n];
		for (i = n; i > h; i--)
			ans[i] = ans[i - 1];
		ans[i] = tmp;
		insert(ans, h + 1, k - 2);
	}
	vector<int> constructArray(int n, int k) {
		int i;
		vector<int> ans;
		for (i = 1; i <= n; i++) ans.push_back(i);
		insert(ans, 1, k);
		return ans;
	}
};
