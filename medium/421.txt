class Solution {
public:
	struct TreeNode {
		TreeNode* c[2];
		TreeNode() { c[0] = c[1] = NULL; }
	};
	int deep;
	TreeNode *root;
	int maxOne(int a) {
		int res = 0;
		while (a > 0)
			a >>= 1, res++;
		return res;
	}
	void insert(TreeNode* &root, int num) {
		if (!root)
			root = new TreeNode();
		TreeNode *p = root;
		for (int tmp = (1 << deep); tmp >= 1; tmp >>= 1) {
			int d = ((num & tmp) > 0);
			if (p->c[d] == NULL)
				p->c[d] = new TreeNode();
			p = p->c[d];
		}
	}

	int findMaximumXOR(vector<int>& nums) {
		root = NULL;
		int max_res = 0;
		for (auto n : nums)
			if (n > max_res)
				max_res = n;
		deep = maxOne(max_res) - 1;
		for (auto n : nums)
			insert(root, n);
		int value;
		max_res = 0;
		for (auto n : nums) {
			value = 0;
			TreeNode *p = root;
			for (int tmp = (1 << deep); tmp >= 1; tmp >>= 1) {
				int d = ((n & tmp) > 0);
				if (p->c[1 - d]) {
					p = p->c[1 - d];
					value |= tmp;
				}
				else
					p = p->c[d];
			}
			max_res = max(max_res, value);
		}
		return max_res;
	}
};

Try:
class Solution {
public:
	int maxOne(int a) {
		int res = 0;
		while (a > 0)
			a >>= 1, res++;
		return res;
	}
	int maxZero(int a) {
		int res = -1, i = 1;
		while (a > 0) {
			if (!(a & 1))
				res = i;
			i++, a >>= 1;
		}
		return res;
	}
	void show(int a) {
		int tmp = a;
		while (a > 0) {
			cout << a % 2 << " ";
			a >>= 1;
		}
		cout << " >> " << tmp << endl;
	}
	int findMaximumXOR(vector<int>& nums) {
		int len = nums.size();
		if (len < 2)
			return 0;
		vector<int> res, one(len, 0);
		int i, j, move = 0, tmp = 0;
		for (i = 0; i < len; i++) {
			one[i] = maxOne(nums[i]);
			show(nums[i]);
			cout<<one[i]<<endl;
			if (one[i] > move)
				move = one[i];
		}
		for (i = 0; i < len; i++)
			if (one[i] == move)
				res.push_back(nums[i]);
		for (j = 0; j < res.size(); j++) {
			move = maxZero(res[0]);
			int a = 0;
			for (i = 0; i < len; i++)
				if (one[i] <= move && one[i] > a)
					a = one[i];
			move = 0;
			for (i = 0; i<len; i++) {
				if (one[i] == a) {
					tmp = res[j] ^ nums[i];
					if (tmp > res[j])
						res[j] = tmp;
				}
			}
		}
		move = res[0];
		for (i = 1; i < res.size(); i++) {
			tmp = res[i];
			if (tmp > move)
				move = tmp;
		}
		return move;
	}
};