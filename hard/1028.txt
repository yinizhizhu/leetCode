class Solution {
public:
	TreeNode* recoverFromPreorder(string str) {
		stack<int> nums, depth;
		stack<TreeNode*> path;
		int i, basis=1, num=0, dep=0;
		for (i = str.size() - 1; i >= 0; ) {
			for (; i >= 0 && str[i] != '-'; i--) {
				num += (str[i] - '0')*basis;
				basis *= 10;
			}
			nums.push(num);
			num = 0;
			basis = 1;
			for (; i >= 0 && str[i] == '-'; i--)
				dep++;
			//cout << nums.top() << "-" << dep << endl;
			if (dep) depth.push(dep);
			dep = 0;
		}
		TreeNode* root = new TreeNode(nums.top()), *top=NULL, *nn=NULL;
		path.push(root);
		nums.pop();
		for (; !nums.empty(); nums.pop(), depth.pop()) {
			for (; path.size() != depth.top(); path.pop());
			top = path.top();
			nn = new TreeNode(nums.top());
			if (top->left) top->right = nn;
			else top->left = nn;
			path.push(nn);
		}
		return root;
	}
};