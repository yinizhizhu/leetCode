int trap(int* height, int heightSize) {
    int result=0;
    int head, tail, highH, highT, calcH, calcT;
    int high;
    
    if (heightSize == 0)
        return 0;

    head = 0;
    highH = height[0];
    calcH = 0;
    
    tail= heightSize - 1;
    highT = height[tail];
    calcT = 0;
    
    for (; head<=tail;)
    {
        if (highH >= highT)
        {
            if (highT > height[tail])
                calcT += highT - height[tail];
            else if(highT < height[tail])
            {
                result += calcT;
                highT = height[tail];
                calcT = 0;
            }
            tail--;
        }
        else if (highH <= highT)
        {
            if (highH > height[head])
                calcH += highH - height[head];
            else if(highH < height[head])
            {
                result += calcH;
                highH = height[head];
                calcH = 0;
            }
            head++;
        }
    }
    result += (highH < highT ? calcH : calcT);
    return result;
}


class Solution {
public:
    int help(vector<int>& height, int head, int tail) {
        int tmp = min(height[head], height[tail]);
        int res = tmp*(tail - head - 1);
        for (++head; head < tail; head++)
            res -= height[head];
        return res;
    }
    int trap(vector<int>& height) {
        int tmp, left = -1, res = 0;
        int i = 0, right = height.size();
        if (right < 3)
            return 0;
        while (i + 1 < right && height[i] < height[i + 1]) i++;
        if (i + 1 < right) left = i, tmp = height[i++];
        else return 0;
        for (; i < right; i++) {
            if (height[i] >= tmp)
                res += help(height, left, i), left = i, tmp = height[i];
        }
        i = right - 1;
        while (i - 1 > left && height[i] < height[i - 1]) i--;
        if (i - 1 > left) right = i, tmp = height[i--];
        else return res;
        for (; i >= left; i--) {
            if (height[i] >= tmp)
                res += help(height, i, right), right = i, tmp = height[i];
        }
        return res;
    }
};