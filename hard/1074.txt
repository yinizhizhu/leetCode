class Solution {
public:
	int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
		int m = matrix.size(), n = matrix[0].size();
		int sum, res = 0, l, r, i;
		for (l = 0; l < n; l++) {
			vector<int> rowsum(m, 0);
			for (r = l; r < n; r++) {
				unordered_map<int, int> hash;
				hash[0] = 1;
				sum = 0;
				for (i = 0; i < m; i++) {
					rowsum[i] += matrix[i][r];
					sum += rowsum[i];
					if (hash.find(sum - target) != hash.end()) res += hash[sum - target];
					hash[sum]++;
                    cout<<sum <<" "<<hash[sum]<<endl;
				}
			}
		}
		return res;
	}
};
