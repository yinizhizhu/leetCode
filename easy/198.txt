int rob(int* nums, int numsSize) {
    int i, result, temp1;
    int *container = malloc(numsSize*sizeof(int));
    if (numsSize < 1)
        return 0;
    temp1 = nums[0];
    container[0] = temp1;
    container[1] = temp1 > nums[1] ? temp1 : nums[1];
    for (i=2; i<numsSize; i++)
    {
        temp1 = container[i-1];
        result = nums[i] + container[i-2];
        container[i] = result > temp1 ? result : temp1;
    }
    result = container[numsSize-1];
    free(container);
    return result;
}


class Solution {
public:
    int rob(vector<int>& nums) {
        int len = nums.size();
        if (len < 1)
            return 0;
        else if (len == 1)
            return nums[0];
        int i, first, sec, thrid;
        first = nums[0];
        sec = (first > nums[1] ? first : nums[1]);
        for (i=2; i<len; i++)
        {
            thrid = nums[i] + first;
            thrid = (thrid > sec ? thrid : sec);
            first = sec;
            sec = thrid;
        }
        return sec;
    }
};