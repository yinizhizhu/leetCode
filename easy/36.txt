bool eachPart(char** board, int x, int y, int boardRowSize)
{
    int i, j, pos, temp[10];
    for (i=0; i<10; i++)
        temp[i]=0;
    for (i=0; i<3; i++)
        for (j=0; j<3; j++)
            if (*(*(board+i+x)+j+y) != '.')
            {
                pos = *(*(board+i+x)+j+y)-'0';
                temp[pos]++;
                if (temp[pos] > 1)
                    return false;
            }
    return true;
}

void init(int* arr)
{
    int i;
    for (i=0; i<100; i++)
        arr[i] = 0;
    return;
}

bool isValidSudoku(char** board, int boardRowSize, int boardColSize) {
    int posX, posY;
    int i, j;
    int lenX, lenY, pos;
    int tempx[100], tempy[100];
    lenX = boardRowSize/3;
    lenY = boardColSize/3;
    for (i=0; i<lenX; i++)
        for (j=0; j<lenY; j++)
            if (!eachPart(board, 3*i, 3*j, boardRowSize))
                return false;
    for (i=0; i<boardRowSize; i++)
    {
        init(tempx);
        init(tempy);
        for (j=0; j<boardColSize; j++)
        {
            if (*(*(board+i)+j) != '.')
            {
                pos = *(*(board+i)+j) - '0';
                tempx[pos]++;
                if (tempx[pos] > 1)
                    return false;
            }
            if (*(*(board+j)+i) != '.')
            {
                pos = *(*(board+j)+i) - '0';
                tempy[pos]++;
                if (tempy[pos] > 1)
                    return false;
            }
        }
    }
    return true;
}