int con[10001];
class Solution {
public:
	int findUnsortedSubarray(vector<int>& nums) {
		int i, h, t=nums.size();
		for (i = 0; i < t; i++) con[i] = nums[i];
		sort(con, con + t);
		for (h = 0; h < t&&con[h] == nums[h]; h++);
		for (t--; t >= h && con[t] == nums[t]; t--);
		return (t - h + 1);
	}
};

int con[10000][2];
class Solution {
public:
	int findUnsortedSubarray(vector<int>& nums) {
		int i, h, t = nums.size(), tmp;
		if (t == 0) return 0;
		tmp = nums[0];
		con[0][0] = tmp;
		for (i = 1; i < t; i++) {
			tmp = max(tmp, nums[i]);
			con[i][0] = tmp;
		}
		tmp = nums[t - 1];
		con[t - 1][1] = tmp;
		for (i = t - 2; i >= 0; i--) {
			tmp = min(tmp, nums[i]);
			con[i][1] = tmp;
		}
		for (h = 0; h < t - 1; h++)
			if (nums[h] > con[h + 1][1]) break;
		for (t--; t > 0; t--)
			if (nums[t] < con[t - 1][0]) break;
		if (t > h) return (t - h + 1);
		return 0;
	}
};