class Solution {
public:
	bool check(vector<vector<int>> & grid, int i, int j) {
		if (grid[i + 1][j + 1] != 5) return false;
		int con[10];
		int ans = 0, x, y, tmp;
		memset(con, 0, sizeof(con));
		for (x=0; x<3; x++)
			for (y = 0; y < 3; y++) {
				tmp = grid[i + x][j + y];
				if (tmp < 1 || tmp > 9) return false;
				con[tmp] ++;
				if (con[tmp] > 1) return false;
			}
		for (x = 0; x < 3; x++)
			ans += grid[i][j+x];
		for (y = 1; y < 3; y++) {
			tmp = 0;
			for (x = 0; x < 3; x++)
				tmp += grid[i + y][j + x];
			if (tmp != ans) return false;
		}
		for (x = 0; x < 3; x++) {
			tmp = 0;
			for (y = 0; y < 3; y++)
				tmp += grid[i + y][j + x];
			if (tmp != ans) return false;
		}
		tmp = 0;
		for (x = 0; x < 3; x++)
			tmp += grid[i + x][j + x];
		if (tmp != ans) return false;
		tmp = 0;
		for (x = 0; x < 3; x++)
			tmp += grid[i + 2 - x][j + x];
		if (tmp != ans) return false;
		return true;
	}
	int numMagicSquaresInside(vector<vector<int>>& grid) {
		int i, j, m, n, ans = 0;
		m = grid.size();
		if (m < 3) return 0;
		n = grid[0].size();
		if (n < 3) return 0;
		for (i = 0; i <= m - 3; i++)
			for (j = 0; j <= n - 3; j++)
				if (check(grid, i, j))
					ans++;
		return ans;
	}
};